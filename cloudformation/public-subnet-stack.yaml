---
AWSTemplateFormatVersion: '2010-09-09'
Description: Resources in the public subnet NAT / ECS Cluster / Load Ballancer

Parameters:
  ECSDeployEnv: #not used at the moment as havnt set up dev environments
    Type: String
    Default: Dev
    AllowedValues:
    - Dev
    - Test
    - Prod
  StackName:
    Description: An Application name that will be prefixed to resource names
    Type: String
    Default: public-stack
  Stage:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PrivateSubnet1RouteTable:
    Type: String
  PrivateSubnet2RouteTable:
    Type: String
  ApiVPC:
    Type: String
  BastionHostKeyName:
    Type: String
  NATInstanceKeyName:
    Type: String

Resources:
  #Acts as a firewall for the PLB, controls both inbound traffic
  PLBSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: Access to the public facing load balancer
          GroupName: !Sub ${StackName}-elb-sg
          VpcId: !Ref ApiVPC
          #allows any access from internet on ports 80 or 443, all port 80 requests redirect to 443
          SecurityGroupIngress: 
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 80
              IpProtocol: "tcp"
              ToPort: 80
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 443
              IpProtocol: "tcp"
              ToPort: 443

  #distributes incoming application traffic to ec2 instances
  PublicLoadBalancer:
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties:
          Name: !Sub ${StackName}-elb
          Scheme: "internet-facing"
          Type: "application"
          Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups: 
            - !Ref PLBSecurityGroup
          IpAddressType: "ipv4"

  # A listener checks for connection requests using a specified protocol and port. 
  # The rules that you define for a listener determine how the load balancer routes requests to its registered targets.
  HTTPSListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref PublicLoadBalancer
          Port: 443
          Protocol: "HTTPS"
          SslPolicy: "ELBSecurityPolicy-2016-08"
          Certificates: 
            - 
              CertificateArn: arn:aws:acm:us-east-1:117468630787:certificate/5cd10a6a-ff2f-41c8-9203-e3fa310a7a74
          
          # Returns a 400 if no rules are met
          DefaultActions: 
            - 
              Type: "fixed-response"
              FixedResponseConfig: 
                ContentType: text/plain
                MessageBody: So close!
                StatusCode: 400

  #redirects all http traffic to https listener
  HTTPListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref PublicLoadBalancer
          Port: 80
          Protocol: "HTTP"
          DefaultActions: 
            - 
              Order: 1
              RedirectConfig: 
                  Protocol: "HTTPS"
                  Port: "443"
                  Host: "#{host}"
                  Path: "/#{path}"
                  Query: "#{query}"
                  StatusCode: "HTTP_301"
              Type: "redirect"


  ###
  # BASTION HOST
  # Used for aurora ssh
  ###
  
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet1
      InstanceType: t3.nano
      KeyName: !Ref BastionHostKeyName
      ImageId: ami-0ff8a91507f77f867
      Tenancy: default
      SecurityGroupIds: 
        - !Ref BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${StackName} Bastion Host

  BastionHostEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      InstanceId: !Ref BastionHost

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for bastion host
      VpcId: !Ref ApiVPC
      Tags:
        - Key: Name
          Value: !Sub ${StackName} (BastionHostSG)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          Description: SSH Service port
          CidrIp: #YOUR IP
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          Description: All TCP/UDP port opened for bastion host to access external network

  ###
  # NAT INSTANCES
  # One for each subnet
  ###
  NATInstance1:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet1
      InstanceType: t3.nano
      KeyName: !Ref NATInstanceKeyName
      ImageId: ami-00a36856283d67c39 #community nat instance ami
      SourceDestCheck: False
      IamInstanceProfile: !Ref NATInstanceProfile
      SecurityGroupIds:
        - !Ref NATInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${StackName} NAT Instance 1

  NATInstance1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      InstanceId: !Ref NATInstance1
  
  NATInstance1PrivateSubnetSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance1

  NATInstance2:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet2
      InstanceType: t3.nano
      KeyName: !Ref NATInstanceKeyName
      ImageId: ami-00a36856283d67c39 #community nat instance ami
      SourceDestCheck: False
      IamInstanceProfile: !Ref NATInstanceProfile
      SecurityGroupIds:
        - !Ref NATInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${StackName} NAT Instance 2

  NATInstance2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      InstanceId: !Ref NATInstance2
  
  NATInstance2PrivateSubnetSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance2

  NATInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Security Group for NAT instances
      GroupDescription: Open Port 22 for ssh
      VpcId: !Ref ApiVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: NAT instance SG

  NATRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ec2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: Stmt1425023276000
              Effect: Allow
              Action:
              - 'ec2:AssociateAddress'
              - 'ec2:ModifyInstanceAttribute'
              - 'ec2:CreateRoute'
              - 'ec2:ReplaceRoute'
              Resource:
              - '*'

  NATInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref NATRole
      InstanceProfileName: NATRole

Outputs:  
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]
  PLBSecurityGroup:
    Description: loadbalancer security group
    Value: !Ref PLBSecurityGroup
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'PLBSecurityGroup' ] ]
  HTTPSListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref HTTPSListener
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'HTTPSListener' ] ]
  NATInstanceSecurityGroup:
    Description: nat instances
    Value: !Ref NATInstanceSecurityGroup
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'NATInstanceSecurityGroup' ] ]  